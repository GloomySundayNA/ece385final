/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000000;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}


/**
 * 
 * 
 * used the sbox to substitude values
 */
unsigned char subBtyes(unsigned char msg)
{
	return aes_sbox[msg];
}

void rotWord(unsigned char * word, unsigned char * rotWord)
{


	rotWord[0] = word[1];
	rotWord[1] = word[2];
	rotWord[2] = word[3];
	rotWord[3] = word[0];
}
/**
 * 
 * Key expansion
 * 
 */
void keyExpansion(unsigned char * key, unsigned char * keySchedule)
 {
	unsigned char previous_key[4];
		unsigned char temp[4];
		unsigned int temp_int;

		for (int i = 0; i < 16; i++) {
			keySchedule[i] = key[i];
		}

		for (int i = 4; i < 44; i++) {
			for(int j = 0; j < 4; j++) {
				previous_key[j] = keySchedule[4*i + j - 4];
			}

			if (i % 4 == 0) {
				rotWord(previous_key, temp);
				for (int z = 0; z < 4; z++) {
					temp[z] = subBtyes(temp[z]);
				}

				previous_key[0] = temp[0] ^ (Rcon[(i / 4)] >> 24);
				previous_key[1] = temp[1] ^ (Rcon[(i / 4)] >> 16);
				previous_key[2] = temp[2] ^ (Rcon[(i / 4)] >> 8);
				previous_key[3] = temp[3] ^ (Rcon[(i / 4)]);


			}
			for(int j = 0; j < 4; j++) {
				keySchedule[(4 * i) + j] = keySchedule[(4*i) + j - 16] ^ previous_key[j];
			}
		}
 }

void addRoundKey(unsigned char * msg, unsigned char * key, int count)
{
	int i;
	for(i = 0; i < 16; i++){
		msg[i] ^= key[count * 16 + i];
	}
}


void shiftRows(unsigned char* msg)
{

	unsigned char temp;

		//first loop for each row
		for (int i = 0; i < 4; i++) {
			//second loop for how many times it shift
			for (int j = 0; j < i; j++) {

				//store first byte in each row
				temp = msg[i];

				//third loop the actual shift
				for(int z = 0; z < 3; z++) {
					msg[4 * z + i] = msg[(4* (z + 1) + i)];
				}

				//put first byte of each row to the end of each row
				msg[(3 * 4) + i] = temp;
			}
		}
}
/**
 * 
 * for debug purposes
 * 
 */
void hex_to_ascii(unsigned char * msg)
{
	
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			printf("%x ", msg[j * 4 + i]);
		}
		printf("\n");
	}
	printf("\n");
}


/**
 * 
 * mixColumn using gf_mul
 */ 

void mixColumns(unsigned char* msg)
{


	unsigned char temp[4];
		for (int i = 0; i < 4; i++) {
			for(int j = 0; j < 4; j++) {
				temp[j] = msg[4 * i + j];
			}
			msg[4*i] = gf_mul[temp[0]][0] ^ gf_mul[temp[1]][1] ^ temp[2] ^ temp[3];
			msg[4*i + 1] = temp[0] ^ gf_mul[temp[1]][0] ^ gf_mul[temp[2]][1] ^ temp[3];
			msg[4*i + 2] = temp[0] ^ temp[1] ^ gf_mul[temp[2]][0] ^ gf_mul[temp[3]][1];
			msg[4*i + 3] = gf_mul[temp[0]][1] ^ temp[1] ^ temp[2] ^ gf_mul[temp[3]][0];
		}
}







/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	unsigned char tempmsg[16];
	unsigned char tempkey[16];
	
	
	for(int i = 0; i < 16; i++){
		tempmsg[i] = charsToHex(msg_ascii[2 * i], msg_ascii[2 * i + 1]);
		tempkey[i] = charsToHex(key_ascii[2 * i], key_ascii[2 * i + 1]);
	}
	unsigned char keySchedule[176];
	//printMsg(tempmsg);
	// printMsg(tempkey);
	keyExpansion(tempkey, keySchedule);

	// for(int i = 0; i < 11; i++)
	// 	printMsg(&keySchedule[i * 16]);

	addRoundKey(tempmsg, keySchedule, 0);

	for(int i = 0; i < 9; i++){
		for(int j = 0; j < 16; j++){
			tempmsg[j] = subBtyes(tempmsg[j]);
		}
		shiftRows(tempmsg);
		mixColumns(tempmsg);
		addRoundKey(tempmsg, keySchedule, (i + 1));
	}

	
	for(int j = 0; j < 16; j++){
			tempmsg[j] = subBtyes(tempmsg[j]);
	}
	shiftRows(tempmsg);
	addRoundKey(tempmsg, keySchedule, 10);

	//printMsg(tempmsg);

	
	for(int i = 0; i < 4; i++){
		msg_enc[i] = (tempmsg[i * 4] << 24) + (tempmsg[i * 4 + 1] << 16) + (tempmsg[i * 4 + 2] << 8) + (tempmsg[i * 4 + 3]);
		key[i] = (tempkey[i * 4] << 24) + (tempkey[i * 4 + 1] << 16) + (tempkey[i * 4 + 2] << 8) + (tempkey[i * 4 + 3]);
	}



}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
	// Implement this function
	int i;

	AES_PTR[4] = msg_enc[0];
	AES_PTR[5] = msg_enc[1];

	AES_PTR[6] = msg_enc[2];
	AES_PTR[7] = msg_enc[3];
	AES_PTR[14] = 0x00000001;

	while (AES_PTR[15] == 0x00000000){
	printf("error1!");
	for (i = 8; i < 12; i++) {
		msg_dec[i] = AES_PTR[i];
	}
	}

	printf("error3!");
	AES_PTR[14] = 0x00000000;
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			//each byte being store at ptr
			AES_PTR[0] = key[0];
			AES_PTR[1] = key[1];
			AES_PTR[2] = key[2];
			AES_PTR[3] = key[3];


			//AES_PTR[10] = 0xDEADBEEF;
			//if (AES_PTR[10] != 0xDEADBEEF){
			//	printf("error!");
			//}

			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}

